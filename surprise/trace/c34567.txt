Starting main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:247:6.
.0:
	 *g_c = true:bool
	 t0 = *os.Stdin
	 t1 = make io.Reader <- *os.File (t0)
	 t2 = bufio.NewReader(t1)
Returning from bufio.NewReader, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:263:27.
	 t3 = new [1]interface{} (varargs)
	 t4 = &t3[0:int]
	 t5 = make interface{} <- string ("Please insert input:":string)
	 *t4 = t5
	 t6 = slice t3[:]
	 t7 = fmt.Println(t6...)
Starting fmt.Println at /usr/lib/go-1.7/src/fmt/print.go:256:6.
Returning from fmt.Println, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:265:13.
	 t8 = (*bufio.Reader).ReadString(t2, 10:byte)
Returning from (*bufio.Reader).ReadString, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:266:27.
	 t9 = extract t8 #0
	 t10 = extract t8 #1
	 t11 = strings.Fields(t9)
Returning from strings.Fields, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:269:23.
	 t12 = len(t11)
	 t13 = make []int t12 t12
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.1:
	 t14 = &t11[t48]
	 t15 = *t14
	 t16 = strconv.Atoi(t15)
Starting strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:201:6.
.0:
	 t0 = ParseInt(s, 10:int, 0:int)
Starting strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:156:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.1:
	 jump 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 == 0:int
	 if t3 goto 3 else 4
.4:
	 t6 = s[0:int]
	 t7 = t6 == 43:byte
	 if t7 goto 5 else 7
.7:
	 t15 = s[0:int]
	 t16 = t15 == 45:byte
	 if t16 goto 8 else 6
.6:
	 t9 = phi [5: t8, 7: s, 8: t17] #s
	 t10 = phi [5: false:bool, 7: false:bool, 8: true:bool] #neg
	 t11 = ParseUint(t9, base, t1)
Starting strconv.ParseUint at /usr/lib/go-1.7/src/strconv/atoi.go:42:6.
.0:
	 t0 = bitSize == 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: bitSize, 1: 64:int] #bitSize
	 t2 = len(s)
	 t3 = t2 < 1:int
	 if t3 goto 4 else 5
.5:
	 t8 = 2:int <= base
	 if t8 goto 9 else 10
.9:
	 t19 = base <= 36:int
	 jump 10
.10:
	 t20 = phi [5: false:bool, 9: t19] #&&
	 if t20 goto 3 else 8
.3:
	 t4 = phi [10: base, 21: 16:int, 13: 8:int, 22: 10:int] #base
	 t5 = phi [10: 0:int, 21: 2:int, 13: 1:int, 22: 0:int] #i
	 t6 = t4 == 10:int
	 if t6 goto 24 else 26
.24:
	 jump 23
.23:
	 t37 = phi [24: 1844674407370955162:uint64, 25: 1152921504606846976:uint64, 27: t44] #cutoff
	 t38 = convert uint <- int (t1)
	 t39 = 1:uint64 << t38
	 t40 = t39 - 1:uint64
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.28:
	 t45 = s[t48]
	 t46 = 48:byte <= t45
	 if t46 goto 35 else 36
.35:
	 t58 = t45 <= 57:byte
	 jump 36
.36:
	 t59 = phi [28: false:bool, 35: t58] #&&
	 if t59 goto 32 else 34
.32:
	 t54 = t45 - 48:byte
	 jump 31
.31:
	 t51 = phi [32: t54, 33: t56, 37: t61] #v
	 t52 = convert byte <- int (t4)
	 t53 = t51 >= t52
	 if t53 goto 44 else 45
.45:
	 t69 = t47 >= t37
	 if t69 goto 46 else 47
.47:
	 t71 = convert uint64 <- int (t4)
	 t72 = t47 * t71
	 t73 = convert uint64 <- byte (t51)
	 t74 = t72 + t73
	 t75 = t74 < t72
	 if t75 goto 48 else 50
.50:
	 t78 = t74 > t40
	 if t78 goto 48 else 49
.49:
	 t77 = t48 + 1:int
	 jump 30
.30:
	 t47 = phi [23: 0:uint64, 49: t74] #n
	 t48 = phi [23: t5, 49: t77] #i
	 t49 = len(s)
	 t50 = t48 < t49
	 if t50 goto 28 else 29
.29:
	 return t47, nil:error
Returning from strconv.ParseUint, proceeding strconv.ParseInt at /usr/lib/go-1.7/src/strconv/atoi.go:180:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t13 != nil:error
	 if t14 goto 11 else 10
.10:
	 t22 = t1 - 1:int
	 t23 = convert uint <- int (t22)
	 t24 = 1:uint64 << t23
	 if t10 goto 13 else 14
.14:
	 t34 = t12 >= t24
	 if t34 goto 12 else 13
.13:
	 if t10 goto 17 else 16
.16:
	 t39 = convert int64 <- uint64 (t12)
	 if t10 goto 18 else 19
.19:
	 t42 = phi [16: t39, 18: t41] #n
	 return t42, nil:error
Returning from strconv.ParseInt, proceeding strconv.Atoi at /usr/lib/go-1.7/src/strconv/atoi.go:202:22.
	 t1 = extract t0 #0
	 t2 = extract t0 #1
	 t3 = convert int <- int64 (t1)
	 return t3, t2
Returning from strconv.Atoi, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:272:27.
	 t17 = extract t16 #0
	 t18 = extract t16 #1
	 t19 = t18 != nil:error
	 if t19 goto 4 else 5
.5:
	 t51 = &t13[t48]
	 *t51 = t17
	 t52 = t48 + 1:int
	 jump 3
.3:
	 t48 = phi [0: 0:int, 5: t52] #i
	 t49 = len(t11)
	 t50 = t48 < t49
	 if t50 goto 1 else 2
.2:
	 t20 = new [1]int (slicelit)
	 t21 = &t20[0:int]
	 *t21 = 1:int
	 t22 = slice t20[:]
	 t23 = new [2]int (slicelit)
	 t24 = &t23[0:int]
	 *t24 = 0:int
	 t25 = &t23[1:int]
	 *t25 = 1:int
	 t26 = slice t23[:]
	 t27 = andre(t22, t26)
Starting main.andre at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:134:6.
.0:
	 t0 = len(a)
	 t1 = len(b)
	 t2 = t0 > t1
	 if t2 goto 1 else 3
.3:
	 t12 = len(a)
	 t13 = make []int t12 t12
	 jump 2
.2:
	 t5 = phi [1: t4, 3: t13] #sorry
	 t6 = dilla(a, t5)
Starting main.dilla at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:169:6.
.0:
	 t0 = &a[0:int]
	 t1 = *t0
	 t2 = convert int64 <- int (t1)
	 t3 = math/rand.Seed(t2)
Starting math/rand.Seed at /usr/lib/go-1.7/src/math/rand/rand.go:217:6.
.0:
	 t0 = *globalRand
	 t1 = (*Rand).Seed(t0, seed)
Starting (*math/rand.Rand).Seed at /usr/lib/go-1.7/src/math/rand/rand.go:53:16.
.0:
	 t0 = &r.src [#0]
	 t1 = *t0
	 t2 = typeassert,ok t1.(*lockedSource)
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 if t4 goto 1 else 2
.1:
	 t5 = &r.readPos [#2]
	 t6 = (*lockedSource).seedPos(t3, seed, t5)
Starting (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:306:24.
.0:
	 t0 = &r.lk [#0]
	 t1 = (*sync.Mutex).Lock(t0)
Starting (*sync.Mutex).Lock at /usr/lib/go-1.7/src/sync/mutex.go:44:17.
.0:
	 t0 = &m.state [#0]
	 t1 = sync/atomic.CompareAndSwapInt32(t0, 0:int32, 1:int32)
Starting sync/atomic.CompareAndSwapInt32 at /usr/lib/go-1.7/src/sync/atomic/doc.go:74:6.
	(external)
Returning from sync/atomic.CompareAndSwapInt32, proceeding (*sync.Mutex).Lock at /usr/lib/go-1.7/src/sync/mutex.go:46:31.
	 if t1 goto 1 else 2
.1:
	 if false:untyped bool goto 3 else 4
.4:
	 return
Returning from (*sync.Mutex).Lock, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:307:11.
	 t2 = &r.src [#1]
	 t3 = *t2
	 t4 = invoke t3.Seed(seed)
Starting (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:203:23.
.0:
	 t0 = &rng.tap [#0]
	 *t0 = 0:int
	 t1 = &rng.feed [#1]
	 *t1 = 334:int
	 t2 = seed % 2147483647:int64
	 t3 = t2 < 0:int64
	 if t3 goto 1 else 2
.2:
	 t5 = phi [0: t2, 1: t4] #seed
	 t6 = t5 == 0:int64
	 if t6 goto 3 else 4
.4:
	 t7 = phi [2: t5, 3: 89482311:int64] #seed
	 t8 = convert int32 <- int64 (t7)
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.6:
	 return
Returning from (*math/rand.rngSource).Seed, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:308:12.
	 *readPos = 0:int8
	 t5 = &r.lk [#0]
	 t6 = (*sync.Mutex).Unlock(t5)
Starting (*sync.Mutex).Unlock at /usr/lib/go-1.7/src/sync/mutex.go:102:17.
.0:
	 if false:untyped bool goto 1 else 2
.2:
	 t4 = &m.state [#0]
	 t5 = sync/atomic.AddInt32(t4, -1:int32)
Starting sync/atomic.AddInt32 at /usr/lib/go-1.7/src/sync/atomic/doc.go:92:6.
	(external)
Returning from sync/atomic.AddInt32, proceeding (*sync.Mutex).Unlock at /usr/lib/go-1.7/src/sync/mutex.go:109:24.
	 t6 = t5 + 1:int32
	 t7 = t6 & 1:int32
	 t8 = t7 == 0:int32
	 if t8 goto 3 else 4
.4:
	 jump 5
.5:
	 t10 = phi [4: t5, 10: t22] #old
	 t11 = t10 >> 2:uint64
	 t12 = t11 == 0:int32
	 if t12 goto 6 else 8
.6:
	 return
Returning from (*sync.Mutex).Unlock, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:310:13.
	 return
Returning from (*math/rand.lockedSource).seedPos, proceeding (*math/rand.Rand).Seed at /usr/lib/go-1.7/src/math/rand/rand.go:55:13.
	 return
Returning from (*math/rand.Rand).Seed, proceeding math/rand.Seed at /usr/lib/go-1.7/src/math/rand/rand.go:217:40.
	 return
Returning from math/rand.Seed, proceeding main.dilla at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:170:11.
	 return
Returning from main.dilla, proceeding main.andre at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:142:7.
	 t7 = len(a)
	 t8 = len(b)
	 t9 = t7 + t8
	 t10 = make []int t9 t9
	 t11 = len(t10)
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.6:
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.8:
	 t18 = len(t10)
	 t19 = t18 - 1:int
	 t20 = slice t10[:t19]
	 t21 = len(t20)
	 jump 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.15:
	 return t10
Returning from main.andre, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:280:12.
	 t28 = new [2]int (slicelit)
	 t29 = &t28[0:int]
	 *t29 = 0:int
	 t30 = &t28[1:int]
	 *t30 = 2:int
	 t31 = slice t28[:]
	 t32 = gza(t31, t27)
Starting main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:75:6.
.0:
	 t0 = len(a)
	 t1 = len(b)
	 t2 = guru(t0, t1)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:76:16.
	 t3 = t2 + 1:int
	 t4 = make []int t3 t3
	 t5 = new [1]int (slicelit)
	 t6 = &t5[0:int]
	 *t6 = 0:int
	 t7 = slice t5[:]
	 t8 = rakim(a, t7)
Starting main.rakim at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:108:6.
.0:
	 t0 = doom(a, b)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.rakim at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:109:13.
	 t1 = t0 == -1:int
	 if t1 goto 1 else 2
.2:
	 t4 = len(a)
	 t5 = make []int t4 t4
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.3:
	 t6 = len(a)
	 t7 = t8 < t6
	 if t7 goto 6 else 7
.6:
	 t11 = &a[t8]
	 t12 = *t11
	 jump 7
.7:
	 t13 = phi [3: 0:int, 6: t12] #a_i
	 t14 = len(b)
	 t15 = t8 < t14
	 if t15 goto 8 else 9
.8:
	 t16 = &b[t8]
	 t17 = *t16
	 jump 9
.9:
	 t18 = phi [7: 0:int, 8: t17] #b_i
	 t19 = t13 < t18
	 if t19 goto 10 else 11
.11:
	 t25 = phi [9: t13, 10: t24] #a_i
	 t26 = &t5[t8]
	 t27 = t25 - t18
	 *t26 = t27
	 t28 = t8 + 1:int
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.3:
	 t6 = len(a)
	 t7 = t8 < t6
	 if t7 goto 6 else 7
.6:
	 t11 = &a[t8]
	 t12 = *t11
	 jump 7
.7:
	 t13 = phi [3: 0:int, 6: t12] #a_i
	 t14 = len(b)
	 t15 = t8 < t14
	 if t15 goto 8 else 9
.9:
	 t18 = phi [7: 0:int, 8: t17] #b_i
	 t19 = t13 < t18
	 if t19 goto 10 else 11
.11:
	 t25 = phi [9: t13, 10: t24] #a_i
	 t26 = &t5[t8]
	 t27 = t25 - t18
	 *t26 = t27
	 t28 = t8 + 1:int
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.4:
	 return t5
Returning from main.rakim, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:79:14.
	 t9 = doom(a, t8)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.14:
	 t30 = t28 + 1:int
	 t31 = slice bb[:t30]
	 jump 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.22:
	 t45 = len(t14)
	 t46 = len(t25)
	 t47 = t45 < t46
	 if t47 goto 23 else 24
.24:
	 t48 = len(t14)
	 t49 = t48 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.25:
	 t50 = &t14[t55]
	 t51 = *t50
	 t52 = &t25[t55]
	 t53 = *t52
	 t54 = t51 > t53
	 if t54 goto 28 else 29
.29:
	 t57 = &t14[t55]
	 t58 = *t57
	 t59 = &t25[t55]
	 t60 = *t59
	 t61 = t58 < t60
	 if t61 goto 30 else 31
.31:
	 t62 = t55 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.25:
	 t50 = &t14[t55]
	 t51 = *t50
	 t52 = &t25[t55]
	 t53 = *t52
	 t54 = t51 > t53
	 if t54 goto 28 else 29
.29:
	 t57 = &t14[t55]
	 t58 = *t57
	 t59 = &t25[t55]
	 t60 = *t59
	 t61 = t58 < t60
	 if t61 goto 30 else 31
.31:
	 t62 = t55 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.26:
	 return -2:int
Returning from main.doom, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:80:10.
	 t10 = t9 != -2:int
	 if t10 goto 1 else 2
.2:
	 t11 = len(t4)
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.6:
	 t18 = &a[t14]
	 t19 = *t18
	 jump 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.6:
	 t18 = &a[t14]
	 t19 = *t18
	 jump 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.5:
	 return t4
Returning from main.gza, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:281:9.
	 t33 = new [2]int (slicelit)
	 t34 = &t33[0:int]
	 *t34 = 0:int
	 t35 = &t33[1:int]
	 *t35 = 2:int
	 t36 = slice t33[:]
	 t37 = gza(t36, t32)
Starting main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:75:6.
.0:
	 t0 = len(a)
	 t1 = len(b)
	 t2 = guru(t0, t1)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:76:16.
	 t3 = t2 + 1:int
	 t4 = make []int t3 t3
	 t5 = new [1]int (slicelit)
	 t6 = &t5[0:int]
	 *t6 = 0:int
	 t7 = slice t5[:]
	 t8 = rakim(a, t7)
Starting main.rakim at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:108:6.
.0:
	 t0 = doom(a, b)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.rakim at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:109:13.
	 t1 = t0 == -1:int
	 if t1 goto 1 else 2
.2:
	 t4 = len(a)
	 t5 = make []int t4 t4
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.3:
	 t6 = len(a)
	 t7 = t8 < t6
	 if t7 goto 6 else 7
.6:
	 t11 = &a[t8]
	 t12 = *t11
	 jump 7
.7:
	 t13 = phi [3: 0:int, 6: t12] #a_i
	 t14 = len(b)
	 t15 = t8 < t14
	 if t15 goto 8 else 9
.8:
	 t16 = &b[t8]
	 t17 = *t16
	 jump 9
.9:
	 t18 = phi [7: 0:int, 8: t17] #b_i
	 t19 = t13 < t18
	 if t19 goto 10 else 11
.11:
	 t25 = phi [9: t13, 10: t24] #a_i
	 t26 = &t5[t8]
	 t27 = t25 - t18
	 *t26 = t27
	 t28 = t8 + 1:int
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.3:
	 t6 = len(a)
	 t7 = t8 < t6
	 if t7 goto 6 else 7
.6:
	 t11 = &a[t8]
	 t12 = *t11
	 jump 7
.7:
	 t13 = phi [3: 0:int, 6: t12] #a_i
	 t14 = len(b)
	 t15 = t8 < t14
	 if t15 goto 8 else 9
.9:
	 t18 = phi [7: 0:int, 8: t17] #b_i
	 t19 = t13 < t18
	 if t19 goto 10 else 11
.11:
	 t25 = phi [9: t13, 10: t24] #a_i
	 t26 = &t5[t8]
	 t27 = t25 - t18
	 *t26 = t27
	 t28 = t8 + 1:int
	 jump 5
.5:
	 t8 = phi [2: 0:int, 11: t28] #i
	 t9 = len(a)
	 t10 = t8 < t9
	 if t10 goto 3 else 4
.4:
	 return t5
Returning from main.rakim, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:79:14.
	 t9 = doom(a, t8)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.14:
	 t30 = t28 + 1:int
	 t31 = slice bb[:t30]
	 jump 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.22:
	 t45 = len(t14)
	 t46 = len(t25)
	 t47 = t45 < t46
	 if t47 goto 23 else 24
.24:
	 t48 = len(t14)
	 t49 = t48 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.25:
	 t50 = &t14[t55]
	 t51 = *t50
	 t52 = &t25[t55]
	 t53 = *t52
	 t54 = t51 > t53
	 if t54 goto 28 else 29
.29:
	 t57 = &t14[t55]
	 t58 = *t57
	 t59 = &t25[t55]
	 t60 = *t59
	 t61 = t58 < t60
	 if t61 goto 30 else 31
.31:
	 t62 = t55 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.25:
	 t50 = &t14[t55]
	 t51 = *t50
	 t52 = &t25[t55]
	 t53 = *t52
	 t54 = t51 > t53
	 if t54 goto 28 else 29
.29:
	 t57 = &t14[t55]
	 t58 = *t57
	 t59 = &t25[t55]
	 t60 = *t59
	 t61 = t58 < t60
	 if t61 goto 30 else 31
.31:
	 t62 = t55 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.26:
	 return -2:int
Returning from main.doom, proceeding main.gza at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:80:10.
	 t10 = t9 != -2:int
	 if t10 goto 1 else 2
.2:
	 t11 = len(t4)
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.6:
	 t18 = &a[t14]
	 t19 = *t18
	 jump 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.6:
	 t18 = &a[t14]
	 t19 = *t18
	 jump 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.8:
	 t23 = &b[t14]
	 t24 = *t23
	 jump 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.4:
	 t16 = len(a)
	 t17 = t14 < t16
	 if t17 goto 6 else 7
.7:
	 t20 = phi [4: 0:int, 6: t19] #a_i
	 t21 = len(b)
	 t22 = t14 < t21
	 if t22 goto 8 else 9
.9:
	 t25 = phi [7: 0:int, 8: t24] #b_i
	 t26 = t20 + t25
	 t27 = t26 + t12
	 t28 = t27 / 10:int
	 t29 = t27 >= 10:int
	 if t29 goto 10 else 11
.11:
	 t31 = phi [9: t27, 10: t30] #tmp
	 t32 = &t4[t14]
	 *t32 = t31
	 jump 3
.3:
	 t12 = phi [2: 0:int, 11: t28] #wu
	 t13 = phi [2: -1:int, 11: t14]
	 t14 = t13 + 1:int
	 t15 = t14 < t11
	 if t15 goto 4 else 5
.5:
	 return t4
Returning from main.gza, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:282:9.
	 t38 = guru(2:int, 1:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:283:11.
	 t39 = new [1]int (slicelit)
	 t40 = &t39[0:int]
	 *t40 = t38
	 t41 = slice t39[:]
	 t42 = andre(t41, t37)
Starting main.andre at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:134:6.
.0:
	 t0 = len(a)
	 t1 = len(b)
	 t2 = t0 > t1
	 if t2 goto 1 else 3
.3:
	 t12 = len(a)
	 t13 = make []int t12 t12
	 jump 2
.2:
	 t5 = phi [1: t4, 3: t13] #sorry
	 t6 = dilla(a, t5)
Starting main.dilla at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:169:6.
.0:
	 t0 = &a[0:int]
	 t1 = *t0
	 t2 = convert int64 <- int (t1)
	 t3 = math/rand.Seed(t2)
Starting math/rand.Seed at /usr/lib/go-1.7/src/math/rand/rand.go:217:6.
.0:
	 t0 = *globalRand
	 t1 = (*Rand).Seed(t0, seed)
Starting (*math/rand.Rand).Seed at /usr/lib/go-1.7/src/math/rand/rand.go:53:16.
.0:
	 t0 = &r.src [#0]
	 t1 = *t0
	 t2 = typeassert,ok t1.(*lockedSource)
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 if t4 goto 1 else 2
.1:
	 t5 = &r.readPos [#2]
	 t6 = (*lockedSource).seedPos(t3, seed, t5)
Starting (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:306:24.
.0:
	 t0 = &r.lk [#0]
	 t1 = (*sync.Mutex).Lock(t0)
Starting (*sync.Mutex).Lock at /usr/lib/go-1.7/src/sync/mutex.go:44:17.
.0:
	 t0 = &m.state [#0]
	 t1 = sync/atomic.CompareAndSwapInt32(t0, 0:int32, 1:int32)
Starting sync/atomic.CompareAndSwapInt32 at /usr/lib/go-1.7/src/sync/atomic/doc.go:74:6.
	(external)
Returning from sync/atomic.CompareAndSwapInt32, proceeding (*sync.Mutex).Lock at /usr/lib/go-1.7/src/sync/mutex.go:46:31.
	 if t1 goto 1 else 2
.1:
	 if false:untyped bool goto 3 else 4
.4:
	 return
Returning from (*sync.Mutex).Lock, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:307:11.
	 t2 = &r.src [#1]
	 t3 = *t2
	 t4 = invoke t3.Seed(seed)
Starting (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:203:23.
.0:
	 t0 = &rng.tap [#0]
	 *t0 = 0:int
	 t1 = &rng.feed [#1]
	 *t1 = 334:int
	 t2 = seed % 2147483647:int64
	 t3 = t2 < 0:int64
	 if t3 goto 1 else 2
.2:
	 t5 = phi [0: t2, 1: t4] #seed
	 t6 = t5 == 0:int64
	 if t6 goto 3 else 4
.4:
	 t7 = phi [2: t5, 3: 89482311:int64] #seed
	 t8 = convert int32 <- int64 (t7)
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.5:
	 t9 = seedrand(t11)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:217:15.
	 t10 = t12 >= 0:int
	 if t10 goto 8 else 9
.8:
	 t14 = convert int64 <- int32 (t9)
	 t15 = t14 << 40:uint64
	 t16 = seedrand(t9)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:221:16.
	 t17 = convert int64 <- int32 (t16)
	 t18 = t17 << 20:uint64
	 t19 = t15 ^ t18
	 t20 = seedrand(t16)
Starting math/rand.seedrand at /usr/lib/go-1.7/src/math/rand/rng.go:192:6.
.0:
	 t0 = x / 44488:int32
	 t1 = x % 44488:int32
	 t2 = 48271:int32 * t1
	 t3 = 3399:int32 * t0
	 t4 = t2 - t3
	 t5 = t4 < 0:int32
	 if t5 goto 1 else 2
.1:
	 t6 = t4 + 2147483647:int32
	 jump 2
.2:
	 t7 = phi [0: t4, 1: t6] #x
	 return t7
Returning from math/rand.seedrand, proceeding (*math/rand.rngSource).Seed at /usr/lib/go-1.7/src/math/rand/rng.go:223:16.
	 t21 = convert int64 <- int32 (t20)
	 t22 = t19 ^ t21
	 t23 = &rng_cooked[t12]
	 t24 = *t23
	 t25 = t22 ^ t24
	 t26 = &rng.vec [#2]
	 t27 = &t26[t12]
	 t28 = t25 & 9223372036854775807:int64
	 *t27 = t28
	 jump 9
.9:
	 t29 = phi [5: t9, 8: t20] #x
	 t30 = t12 + 1:int
	 jump 7
.7:
	 t11 = phi [4: t8, 9: t29] #x
	 t12 = phi [4: -20:int, 9: t30] #i
	 t13 = t12 < 607:int
	 if t13 goto 5 else 6
.6:
	 return
Returning from (*math/rand.rngSource).Seed, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:308:12.
	 *readPos = 0:int8
	 t5 = &r.lk [#0]
	 t6 = (*sync.Mutex).Unlock(t5)
Starting (*sync.Mutex).Unlock at /usr/lib/go-1.7/src/sync/mutex.go:102:17.
.0:
	 if false:untyped bool goto 1 else 2
.2:
	 t4 = &m.state [#0]
	 t5 = sync/atomic.AddInt32(t4, -1:int32)
Starting sync/atomic.AddInt32 at /usr/lib/go-1.7/src/sync/atomic/doc.go:92:6.
	(external)
Returning from sync/atomic.AddInt32, proceeding (*sync.Mutex).Unlock at /usr/lib/go-1.7/src/sync/mutex.go:109:24.
	 t6 = t5 + 1:int32
	 t7 = t6 & 1:int32
	 t8 = t7 == 0:int32
	 if t8 goto 3 else 4
.4:
	 jump 5
.5:
	 t10 = phi [4: t5, 10: t22] #old
	 t11 = t10 >> 2:uint64
	 t12 = t11 == 0:int32
	 if t12 goto 6 else 8
.6:
	 return
Returning from (*sync.Mutex).Unlock, proceeding (*math/rand.lockedSource).seedPos at /usr/lib/go-1.7/src/math/rand/rand.go:310:13.
	 return
Returning from (*math/rand.lockedSource).seedPos, proceeding (*math/rand.Rand).Seed at /usr/lib/go-1.7/src/math/rand/rand.go:55:13.
	 return
Returning from (*math/rand.Rand).Seed, proceeding math/rand.Seed at /usr/lib/go-1.7/src/math/rand/rand.go:217:40.
	 return
Returning from math/rand.Seed, proceeding main.dilla at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:170:11.
	 return
Returning from main.dilla, proceeding main.andre at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:142:7.
	 t7 = len(a)
	 t8 = len(b)
	 t9 = t7 + t8
	 t10 = make []int t9 t9
	 t11 = len(t10)
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.5:
	 t17 = &t10[t15]
	 *t17 = 0:int
	 jump 4
.4:
	 t14 = phi [2: -1:int, 5: t15]
	 t15 = t14 + 1:int
	 t16 = t15 < t11
	 if t16 goto 5 else 6
.6:
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.7:
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.10:
	 t25 = &a[t36]
	 t26 = *t25
	 t27 = &b[t22]
	 t28 = *t27
	 t29 = t26 * t28
	 t30 = t22 + t36
	 t31 = &t10[t30]
	 t32 = *t31
	 t33 = t32 + t29
	 *t31 = t33
	 t34 = t36 + 1:int
	 jump 12
.12:
	 t36 = phi [7: 0:int, 10: t34] #j
	 t37 = len(a)
	 t38 = t36 < t37
	 if t38 goto 10 else 11
.11:
	 t35 = t22 + 1:int
	 jump 9
.9:
	 t22 = phi [6: 0:int, 11: t35] #i
	 t23 = len(b)
	 t24 = t22 < t23
	 if t24 goto 7 else 8
.8:
	 t18 = len(t10)
	 t19 = t18 - 1:int
	 t20 = slice t10[:t19]
	 t21 = len(t20)
	 jump 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.16:
	 t45 = t40 + 1:int
	 t46 = &t10[t45]
	 t47 = &t10[t40]
	 t48 = *t47
	 t49 = t48 / 10:int
	 t50 = *t46
	 t51 = t50 + t49
	 *t46 = t51
	 t52 = &t10[t40]
	 t53 = *t52
	 t54 = t53 % 10:int
	 *t52 = t54
	 jump 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.14:
	 t42 = &t10[t40]
	 t43 = *t42
	 t44 = t43 >= 10:int
	 if t44 goto 16 else 13
.13:
	 t39 = phi [8: -1:int, 14: t40, 16: t40]
	 t40 = t39 + 1:int
	 t41 = t40 < t21
	 if t41 goto 14 else 15
.15:
	 return t10
Returning from main.andre, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:284:11.
	 t43 = len(t13)
	 t44 = strconv.Itoa(t43)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:285:26.
	 t45 = nas(t44)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:285:13.
	 t46 = doom(t45, t42)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.14:
	 t30 = t28 + 1:int
	 t31 = slice bb[:t30]
	 jump 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.22:
	 t45 = len(t14)
	 t46 = len(t25)
	 t47 = t45 < t46
	 if t47 goto 23 else 24
.23:
	 return -1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:285:9.
	 t47 = t46 != -2:int
	 if t47 goto 6 else 7
.6:
	 *g_c = false:bool
	 jump 7
.7:
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.8:
	 t53 = &t13[t59]
	 t54 = *t53
	 t55 = t54 <= 0:int
	 if t55 goto 11 else 12
.12:
	 t62 = t59 + 1:int
	 jump 10
.10:
	 t59 = phi [7: 0:int, 12: t62] #i
	 t60 = len(t13)
	 t61 = t59 < t60
	 if t61 goto 8 else 9
.9:
	 t56 = len(t13)
	 t57 = t56 / 2:int
	 t58 = make []int t57 t57
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.13:
	 t63 = &t58[t73]
	 t64 = t73 * 2:int
	 t65 = &t13[t64]
	 t66 = *t65
	 t67 = t73 * 2:int
	 t68 = t67 + 1:int
	 t69 = &t13[t68]
	 t70 = *t69
	 t71 = t66 - t70
	 *t63 = t71
	 t72 = t73 + 1:int
	 jump 15
.15:
	 t73 = phi [9: 0:int, 13: t72] #i
	 t74 = len(t58)
	 t75 = t73 < t74
	 if t75 goto 13 else 14
.14:
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.4:
	 t9 = &aa[t7]
	 *t9 = 0:int
	 jump 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.4:
	 t9 = &aa[t7]
	 *t9 = 0:int
	 jump 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.10:
	 t21 = t17 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.20:
	 t44 = t39 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.22:
	 t45 = len(t14)
	 t46 = len(t25)
	 t47 = t45 < t46
	 if t47 goto 23 else 24
.24:
	 t48 = len(t14)
	 t49 = t48 - 1:int
	 jump 27
.27:
	 t55 = phi [24: t49, 31: t62] #i
	 t56 = t55 >= 0:int
	 if t56 goto 25 else 26
.26:
	 return -2:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.2:
	 return b
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.4:
	 t9 = &aa[t7]
	 *t9 = 0:int
	 jump 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.16:
	 t76 = t86 + 1:int
	 t77 = slice t58[:t76]
	 t78 = kendrick(t77)
Starting main.kendrick at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:238:6.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.2:
	 t5 = &a[t3]
	 t6 = *t5
	 t7 = t1 + t6
	 jump 1
.1:
	 t1 = phi [0: 0:int, 2: t7] #damn
	 t2 = phi [0: -1:int, 2: t3]
	 t3 = t2 + 1:int
	 t4 = t3 < t0
	 if t4 goto 2 else 3
.3:
	 return t1
Returning from main.kendrick, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:306:21.
	 t79 = strconv.Itoa(t78)
Starting strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:24:6.
.0:
	 t0 = convert int64 <- int (i)
	 t1 = FormatInt(t0, 10:int)
Starting strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:18:6.
.0:
	 t0 = convert uint64 <- int64 (i)
	 t1 = i < 0:int64
	 t2 = formatBits(nil:[]byte, t0, base, t1, false:bool)
Starting strconv.formatBits at /usr/lib/go-1.7/src/strconv/itoa.go:60:6.
.0:
	 t0 = base < 2:int
	 if t0 goto 1 else 3
.3:
	 t3 = base > 36:int
	 if t3 goto 1 else 2
.2:
	 t2 = new [65]byte (a)
	 if neg goto 4 else 5
.5:
	 t5 = phi [2: u, 4: t4] #u
	 t6 = base == 10:int
	 if t6 goto 6 else 8
.6:
	 if false:untyped bool goto 11 else 9
.9:
	 t11 = phi [6: t5, 11: t18] #u
	 t12 = phi [6: 65:int, 11: t19] #i
	 t13 = convert uintptr <- uint64 (t11)
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.15:
	 t33 = t44 - 1:int
	 t34 = t45 / 10:uintptr
	 t35 = &t2[t33]
	 t36 = t34 * 10:uintptr
	 t37 = t45 - t36
	 t38 = t37 + 48:uintptr
	 t39 = convert byte <- uintptr (t38)
	 *t35 = t39
	 jump 17
.17:
	 t44 = phi [9: t12, 15: t33] #i
	 t45 = phi [9: t13, 15: t34] #us
	 t46 = t45 >= 10:uintptr
	 if t46 goto 15 else 16
.16:
	 t40 = t44 - 1:int
	 t41 = &t2[t40]
	 t42 = t45 + 48:uintptr
	 t43 = convert byte <- uintptr (t42)
	 *t41 = t43
	 jump 7
.7:
	 t7 = phi [16: t40, 21: t58, 24: t72] #i
	 if neg goto 26 else 27
.27:
	 t81 = phi [7: t7, 26: t79] #i
	 if append_ goto 28 else 29
.29:
	 t84 = slice t2[t81:]
	 t85 = convert string <- []byte (t84)
	 return nil:[]byte, t85
Returning from strconv.formatBits, proceeding strconv.FormatInt at /usr/lib/go-1.7/src/strconv/itoa.go:19:20.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t4
Returning from strconv.FormatInt, proceeding strconv.Itoa at /usr/lib/go-1.7/src/strconv/itoa.go:25:18.
	 return t1
Returning from strconv.Itoa, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:307:29.
	 t80 = nas(t79)
Starting main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:174:6.
.0:
	 t0 = len(a)
	 t1 = t0 / 2:int
	 t2 = len(a)
	 t3 = t2 / 2:int
	 t4 = t1 + t3
	 t5 = make []int 0:int t4
	 t6 = len(a)
	 t7 = t6 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.1:
	 t8 = a[t14]
	 t9 = t8 - 48:byte
	 t10 = convert int <- byte (t9)
	 t11 = t10 >= 0:int
	 if t11 goto 6 else 5
.6:
	 t25 = t10 < 10:int
	 if t25 goto 4 else 5
.4:
	 t16 = t12 + t10
	 t17 = guru(t10, 0:int)
Starting main.guru at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:14:6.
.0:
	 t0 = a > b
	 if t0 goto 1 else 2
.1:
	 return a
Returning from main.guru, proceeding main.nas at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:186:35.
	 t18 = new [1]int (varargs)
	 t19 = &t18[0:int]
	 *t19 = t17
	 t20 = slice t18[:]
	 t21 = append(t13, t20...)
	 jump 5
.5:
	 t22 = phi [1: t12, 6: t12, 4: t16] #z
	 t23 = phi [1: t13, 6: t13, 4: t21] #msg
	 t24 = t22 == 1024:int
	 if t24 goto 7 else 8
.8:
	 t27 = phi [5: t22, 7: t26] #z
	 t28 = t14 - 1:int
	 jump 3
.3:
	 t12 = phi [0: 0:int, 8: t27] #z
	 t13 = phi [0: t5, 8: t23] #msg
	 t14 = phi [0: t7, 8: t28] #i
	 t15 = t14 >= 0:int
	 if t15 goto 1 else 2
.2:
	 return t13
Returning from main.nas, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:15.
	 t81 = new [1]int (slicelit)
	 t82 = &t81[0:int]
	 *t82 = 0:int
	 t83 = slice t81[:]
	 t84 = doom(t80, t83)
Starting main.doom at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:24:6.
.0:
	 t0 = len(aa)
	 t1 = t0 / 2:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.1:
	 t2 = &aa[t7]
	 t3 = *t2
	 t4 = t3 == 0:int
	 if t4 goto 4 else 5
.5:
	 t10 = t7 - 1:int
	 jump 3
.3:
	 t7 = phi [0: t1, 5: t10] #ii
	 t8 = t7 >= 1:int
	 if t8 goto 1 else 2
.2:
	 t5 = len(aa)
	 t6 = t5 - 1:int
	 jump 8
.8:
	 t17 = phi [2: t6, 10: t21] #i
	 t18 = t17 >= 0:int
	 if t18 goto 6 else 7
.6:
	 t11 = &aa[t17]
	 t12 = *t11
	 t13 = t12 > 0:int
	 if t13 goto 9 else 10
.9:
	 t19 = t17 + 1:int
	 t20 = slice aa[:t19]
	 jump 7
.7:
	 t14 = phi [8: nil:[]int, 9: t20] #m
	 t15 = len(bb)
	 t16 = t15 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.11:
	 t22 = &bb[t28]
	 t23 = *t22
	 t24 = t23 > 0:int
	 if t24 goto 14 else 15
.15:
	 t32 = t28 - 1:int
	 jump 13
.13:
	 t28 = phi [7: t16, 15: t32] #i
	 t29 = t28 >= 0:int
	 if t29 goto 11 else 12
.12:
	 t25 = phi [13: nil:[]int, 14: t31] #f
	 t26 = len(aa)
	 t27 = t26 - 1:int
	 jump 18
.18:
	 t39 = phi [12: t27, 20: t44] #i
	 t40 = t39 >= 0:int
	 if t40 goto 16 else 17
.16:
	 t33 = &aa[t39]
	 t34 = *t33
	 t35 = t34 > 0:int
	 if t35 goto 19 else 20
.19:
	 t41 = &aa[t39]
	 t42 = *t41
	 t43 = 0:int + t42
	 jump 17
.17:
	 t36 = len(t14)
	 t37 = len(t25)
	 t38 = t36 > t37
	 if t38 goto 21 else 22
.21:
	 return 1:int
Returning from main.doom, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:308:11.
	 t85 = t84 == -1:int
	 if t85 goto 19 else 20
.20:
	 t89 = t86 + 1:int
	 jump 18
.18:
	 t86 = phi [14: 0:int, 20: t89] #i
	 t87 = len(t58)
	 t88 = t86 < t87
	 if t88 goto 16 else 17
.17:
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.21:
	 t90 = &t13[t101]
	 t91 = *t90
	 t92 = t100 + t91
	 t93 = t101 + 1:int
	 t94 = &t13[t93]
	 t95 = *t94
	 t96 = t99 + t95
	 t97 = t101 + 2:int
	 jump 23
.23:
	 t99 = phi [17: 0:int, 21: t96] #o_su
	 t100 = phi [17: 0:int, 21: t92] #e_su
	 t101 = phi [17: 0:int, 21: t97] #i
	 t102 = len(t13)
	 t103 = t102 - 1:int
	 t104 = t101 < t103
	 if t104 goto 21 else 22
.22:
	 t98 = t99 != t100
	 if t98 goto 24 else 25
.24:
	 *g_c = false:bool
	 jump 25
.25:
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.26:
	 jump 31
.31:
	 t118 = phi [26: t108, 33: t127] #u_arr
	 t119 = phi [26: 0:int, 33: t128] #x
	 t120 = len(t118)
	 t121 = t119 < t120
	 if t121 goto 29 else 30
.30:
	 t117 = t109 + 1:int
	 jump 28
.28:
	 t108 = phi [25: nil:[]int, 30: t118] #u_arr
	 t109 = phi [25: 0:int, 30: t117] #i
	 t110 = len(t13)
	 t111 = t109 < t110
	 if t111 goto 26 else 27
.27:
	 t105 = &t13[49:int]
	 t106 = *t105
	 t107 = t106 != 98:int
	 if t107 goto 34 else 35
.34:
	 *g_c = false:bool
	 jump 35
.35:
	 t129 = &t13[8:int]
	 t130 = *t129
	 t131 = &t13[9:int]
	 t132 = *t131
	 t133 = t130 - t132
	 t134 = &t13[12:int]
	 t135 = *t134
	 t136 = t133 != t135
	 if t136 goto 36 else 37
.36:
	 *g_c = false:bool
	 jump 37
.37:
	 t137 = *g_c
	 if t137 goto 38 else 40
.40:
	 t143 = new [1]interface{} (varargs)
	 t144 = &t143[0:int]
	 t145 = make interface{} <- string ("No flag for you":string)
	 *t144 = t145
	 t146 = slice t143[:]
	 t147 = fmt.Println(t146...)
Starting fmt.Println at /usr/lib/go-1.7/src/fmt/print.go:256:6.
.0:
	 t0 = *os.Stdout
	 t1 = make io.Writer <- *os.File (t0)
	 t2 = Fprintln(t1, a...)
Starting fmt.Fprintln at /usr/lib/go-1.7/src/fmt/print.go:245:6.
.0:
	 t0 = newPrinter()
Starting fmt.newPrinter at /usr/lib/go-1.7/src/fmt/print.go:132:6.
.0:
	 t0 = (*sync.Pool).Get(ppFree)
Starting (*sync.Pool).Get at /usr/lib/go-1.7/src/sync/pool.go:97:16.
	(external)
Starting fmt.init$1 at /usr/lib/go-1.7/src/fmt/print.go:128:7.
.0:
	 t0 = new pp (new)
	 t1 = make interface{} <- *pp (t0)
	 return t1
Returning from fmt.init$1, proceeding (*sync.Pool).Get.
Returning from (*sync.Pool).Get, proceeding fmt.newPrinter at /usr/lib/go-1.7/src/fmt/print.go:133:17.
	 t1 = typeassert t0.(*pp)
	 t2 = &t1.panicking [#6]
	 *t2 = false:bool
	 t3 = &t1.erroring [#7]
	 *t3 = false:bool
	 t4 = &t1.fmt [#3]
	 t5 = &t1.buf [#0]
	 t6 = (*fmt).init(t4, t5)
Starting (*fmt.fmt).init at /usr/lib/go-1.7/src/fmt/format.go:58:15.
.0:
	 t0 = &f.buf [#0]
	 *t0 = buf
	 t1 = (*fmt).clearflags(f)
Starting (*fmt.fmt).clearflags at /usr/lib/go-1.7/src/fmt/format.go:54:15.
.0:
	 t0 = &f.fmtFlags [#1]
	 t1 = local fmtFlags ()
	 t2 = *t1
	 *t0 = t2
	 return
Returning from (*fmt.fmt).clearflags, proceeding (*fmt.fmt).init at /usr/lib/go-1.7/src/fmt/format.go:60:14.
	 return
Returning from (*fmt.fmt).init, proceeding fmt.newPrinter at /usr/lib/go-1.7/src/fmt/print.go:136:12.
	 return t1
Returning from fmt.newPrinter, proceeding fmt.Fprintln at /usr/lib/go-1.7/src/fmt/print.go:246:17.
	 t1 = (*pp).doPrintln(t0, a)
Starting (*fmt.pp).doPrintln at /usr/lib/go-1.7/src/fmt/print.go:1120:14.
.0:
	 t0 = len(a)
	 jump 1
.1:
	 t1 = phi [0: -1:int, 5: t2]
	 t2 = t1 + 1:int
	 t3 = t2 < t0
	 if t3 goto 2 else 3
.2:
	 t4 = &a[t2]
	 t5 = *t4
	 t6 = t2 > 0:int
	 if t6 goto 4 else 5
.5:
	 t11 = (*pp).printArg(p, t5, 118:rune)
Starting (*fmt.pp).printArg at /usr/lib/go-1.7/src/fmt/print.go:598:14.
.0:
	 t0 = &p.arg [#1]
	 *t0 = arg
	 t1 = &p.value [#2]
	 t2 = local reflect.Value ()
	 t3 = *t2
	 *t1 = t3
	 t4 = arg == nil:interface{}
	 if t4 goto 1 else 2
.2:
	 t6 = verb == 84:rune
	 if t6 goto 7 else 9
.9:
	 t17 = verb == 112:rune
	 if t17 goto 8 else 10
.10:
	 t18 = typeassert,ok arg.(bool)
	 t19 = extract t18 #0
	 t20 = extract t18 #1
	 if t20 goto 12 else 13
.13:
	 t22 = typeassert,ok arg.(float32)
	 t23 = extract t22 #0
	 t24 = extract t22 #1
	 if t24 goto 14 else 15
.15:
	 t27 = typeassert,ok arg.(float64)
	 t28 = extract t27 #0
	 t29 = extract t27 #1
	 if t29 goto 16 else 17
.17:
	 t31 = typeassert,ok arg.(complex64)
	 t32 = extract t31 #0
	 t33 = extract t31 #1
	 if t33 goto 18 else 19
.19:
	 t36 = typeassert,ok arg.(complex128)
	 t37 = extract t36 #0
	 t38 = extract t36 #1
	 if t38 goto 20 else 21
.21:
	 t40 = typeassert,ok arg.(int)
	 t41 = extract t40 #0
	 t42 = extract t40 #1
	 if t42 goto 22 else 23
.23:
	 t45 = typeassert,ok arg.(int8)
	 t46 = extract t45 #0
	 t47 = extract t45 #1
	 if t47 goto 24 else 25
.25:
	 t50 = typeassert,ok arg.(int16)
	 t51 = extract t50 #0
	 t52 = extract t50 #1
	 if t52 goto 26 else 27
.27:
	 t55 = typeassert,ok arg.(int32)
	 t56 = extract t55 #0
	 t57 = extract t55 #1
	 if t57 goto 28 else 29
.29:
	 t60 = typeassert,ok arg.(int64)
	 t61 = extract t60 #0
	 t62 = extract t60 #1
	 if t62 goto 30 else 31
.31:
	 t65 = typeassert,ok arg.(uint)
	 t66 = extract t65 #0
	 t67 = extract t65 #1
	 if t67 goto 32 else 33
.33:
	 t70 = typeassert,ok arg.(uint8)
	 t71 = extract t70 #0
	 t72 = extract t70 #1
	 if t72 goto 34 else 35
.35:
	 t75 = typeassert,ok arg.(uint16)
	 t76 = extract t75 #0
	 t77 = extract t75 #1
	 if t77 goto 36 else 37
.37:
	 t80 = typeassert,ok arg.(uint32)
	 t81 = extract t80 #0
	 t82 = extract t80 #1
	 if t82 goto 38 else 39
.39:
	 t85 = typeassert,ok arg.(uint64)
	 t86 = extract t85 #0
	 t87 = extract t85 #1
	 if t87 goto 40 else 41
.41:
	 t89 = typeassert,ok arg.(uintptr)
	 t90 = extract t89 #0
	 t91 = extract t89 #1
	 if t91 goto 42 else 43
.43:
	 t94 = typeassert,ok arg.(string)
	 t95 = extract t94 #0
	 t96 = extract t94 #1
	 if t96 goto 44 else 45
.44:
	 t97 = (*pp).fmtString(p, t95, verb)
Starting (*fmt.pp).fmtString at /usr/lib/go-1.7/src/fmt/print.go:424:14.
.0:
	 t0 = verb == 118:rune
	 if t0 goto 2 else 4
.2:
	 t1 = &p.fmt [#3]
	 t2 = &t1.fmtFlags [#1]
	 t3 = &t2.sharpV [#8]
	 t4 = *t3
	 if t4 goto 5 else 6
.6:
	 t10 = &p.fmt [#3]
	 t11 = (*fmt).fmt_s(t10, v)
Starting (*fmt.fmt).fmt_s at /usr/lib/go-1.7/src/fmt/format.go:326:15.
.0:
	 t0 = (*fmt).truncate(f, s)
Starting (*fmt.fmt).truncate at /usr/lib/go-1.7/src/fmt/format.go:312:15.
.0:
	 t0 = &f.fmtFlags [#1]
	 t1 = &t0.precPresent [#1]
	 t2 = *t1
	 if t2 goto 1 else 2
.2:
	 return s
Returning from (*fmt.fmt).truncate, proceeding (*fmt.fmt).fmt_s at /usr/lib/go-1.7/src/fmt/format.go:327:16.
	 t1 = (*fmt).padString(f, t0)
Starting (*fmt.fmt).padString at /usr/lib/go-1.7/src/fmt/format.go:108:15.
.0:
	 t0 = &f.fmtFlags [#1]
	 t1 = &t0.widPresent [#0]
	 t2 = *t1
	 if t2 goto 3 else 1
.1:
	 t3 = &f.buf [#0]
	 t4 = *t3
	 t5 = (*buffer).WriteString(t4, s)
Starting (*fmt.buffer).WriteString at /usr/lib/go-1.7/src/fmt/print.go:81:18.
.0:
	 t0 = *b
	 t1 = append(t0, s...)
	 *b = t1
	 return
Returning from (*fmt.buffer).WriteString, proceeding (*fmt.fmt).padString at /usr/lib/go-1.7/src/fmt/format.go:110:20.
	 return
Returning from (*fmt.fmt).padString, proceeding (*fmt.fmt).fmt_s at /usr/lib/go-1.7/src/fmt/format.go:328:13.
	 return
Returning from (*fmt.fmt).fmt_s, proceeding (*fmt.pp).fmtString at /usr/lib/go-1.7/src/fmt/print.go:430:15.
	 jump 1
.1:
	 return
Returning from (*fmt.pp).fmtString, proceeding (*fmt.pp).printArg at /usr/lib/go-1.7/src/fmt/print.go:658:14.
	 jump 11
.11:
	 return
Returning from (*fmt.pp).printArg, proceeding (*fmt.pp).doPrintln at /usr/lib/go-1.7/src/fmt/print.go:1125:13.
	 jump 1
.1:
	 t1 = phi [0: -1:int, 5: t2]
	 t2 = t1 + 1:int
	 t3 = t2 < t0
	 if t3 goto 2 else 3
.3:
	 t7 = &p.buf [#0]
	 t8 = (*buffer).WriteByte(t7, 10:byte)
Starting (*fmt.buffer).WriteByte at /usr/lib/go-1.7/src/fmt/print.go:85:18.
.0:
	 t0 = *b
	 t1 = new [1]byte (varargs)
	 t2 = &t1[0:int]
	 *t2 = c
	 t3 = slice t1[:]
	 t4 = append(t0, t3...)
	 *b = t4
	 return
Returning from (*fmt.buffer).WriteByte, proceeding (*fmt.pp).doPrintln at /usr/lib/go-1.7/src/fmt/print.go:1127:17.
	 return
Returning from (*fmt.pp).doPrintln, proceeding fmt.Fprintln at /usr/lib/go-1.7/src/fmt/print.go:247:13.
	 t2 = &t0.buf [#0]
	 t3 = *t2
	 t4 = changetype []byte <- buffer (t3)
	 t5 = invoke w.Write(t4)
Starting (*os.File).Write at /usr/lib/go-1.7/src/os/file.go:138:16.
.0:
	 t0 = f == nil:*File
	 if t0 goto 1 else 2
.2:
	 t2 = (*File).write(f, b)
Starting (*os.File).write at /usr/lib/go-1.7/src/os/file_unix.go:243:16.
.0:
	 jump 1
.1:
	 t0 = phi [0: b, 5: t18, 9: t23] #b
	 t1 = phi [0: 0:int, 5: t14, 9: t14] #n
	 if false:untyped bool goto 4 else 3
.3:
	 t3 = phi [1: t0, 4: t0, 2: t2] #bcap
	 t4 = &f.file [#0]
	 t5 = *t4
	 t6 = &t5.fd [#0]
	 t7 = *t6
	 t8 = syscall.Write(t7, t3)
Starting syscall.Write at /usr/lib/go-1.7/src/syscall/syscall_unix.go:176:6.
	(external)
Returning from syscall.Write, proceeding (*os.File).write at /usr/lib/go-1.7/src/os/file_unix.go:249:35.
	 t9 = extract t8 #0
	 t10 = extract t8 #1
	 t11 = fixCount(t9, t10)
Starting os.fixCount at /usr/lib/go-1.7/src/os/file.go:275:6.
.0:
	 t0 = n < 0:int
	 if t0 goto 1 else 2
.2:
	 t1 = phi [0: n, 1: 0:int] #n
	 return t1, err
Returning from os.fixCount, proceeding (*os.File).write at /usr/lib/go-1.7/src/os/file_unix.go:249:21.
	 t12 = extract t11 #0
	 t13 = extract t11 #1
	 t14 = t1 + t12
	 t15 = 0:int < t12
	 if t15 goto 8 else 7
.8:
	 t21 = len(t3)
	 t22 = t12 < t21
	 if t22 goto 5 else 7
.7:
	 t19 = make error <- syscall.Errno (4:syscall.Errno)
	 t20 = t13 == t19
	 if t20 goto 5 else 6
.6:
	 if false:untyped bool goto 12 else 10
.10:
	 return t14, t13
Returning from (*os.File).write, proceeding (*os.File).Write at /usr/lib/go-1.7/src/os/file.go:142:17.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 t5 = t3 < 0:int
	 if t5 goto 3 else 4
.4:
	 t6 = phi [2: t3, 3: 0:int] #n
	 t7 = len(b)
	 t8 = t6 != t7
	 if t8 goto 5 else 6
.6:
	 t10 = phi [4: nil:error, 5: t9] #err
	 t11 = epipecheck(f, t4)
Starting os.epipecheck at /usr/lib/go-1.7/src/os/file_unix.go:71:6.
.0:
	 t0 = make error <- syscall.Errno (32:syscall.Errno)
	 t1 = e == t0
	 if t1 goto 3 else 2
.2:
	 return
Returning from os.epipecheck, proceeding (*os.File).Write at /usr/lib/go-1.7/src/os/file.go:150:12.
	 t12 = t4 != nil:error
	 if t12 goto 7 else 8
.8:
	 t22 = phi [6: t10, 7: t21] #err
	 return t6, t22
Returning from (*os.File).Write, proceeding fmt.Fprintln at /usr/lib/go-1.7/src/fmt/print.go:248:18.
	 t6 = extract t5 #0
	 t7 = extract t5 #1
	 t8 = (*pp).free(t0)
Starting (*fmt.pp).free at /usr/lib/go-1.7/src/fmt/print.go:141:14.
.0:
	 t0 = &p.buf [#0]
	 t1 = &p.buf [#0]
	 t2 = *t1
	 t3 = slice t2[:0:int]
	 *t0 = t3
	 t4 = &p.arg [#1]
	 *t4 = nil:interface{}
	 t5 = &p.value [#2]
	 t6 = local reflect.Value ()
	 t7 = *t6
	 *t5 = t7
	 t8 = make interface{} <- *pp (p)
	 t9 = (*sync.Pool).Put(ppFree, t8)
Starting (*sync.Pool).Put at /usr/lib/go-1.7/src/sync/pool.go:65:16.
	(external)
Returning from (*sync.Pool).Put, proceeding (*fmt.pp).free at /usr/lib/go-1.7/src/fmt/print.go:145:12.
	 return
Returning from (*fmt.pp).free, proceeding fmt.Fprintln at /usr/lib/go-1.7/src/fmt/print.go:249:8.
	 return t6, t7
Returning from fmt.Fprintln, proceeding fmt.Println at /usr/lib/go-1.7/src/fmt/print.go:257:17.
	 t3 = extract t2 #0
	 t4 = extract t2 #1
	 return t3, t4
Returning from fmt.Println, proceeding main.main at /home/gull.omer/go/src/omer/ssa/omerr/version3/ssa.go:348:14.
	 jump 39
.39:
	 return
Returning from main.main.
